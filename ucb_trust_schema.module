<?php

/**
 * @file
 * Contains ucb_trust_schema.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function ucb_trust_schema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ucb_trust_schema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Trust Schema Module enables individual Drupal sites to declare and expose trust metadata on selected content nodes.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function ucb_trust_schema_permission() {
  return [
    'manage trust metadata' => [
      'title' => t('Manage trust metadata'),
      'description' => t('Assign or modify trust metadata fields on content.'),
      'restrict_access' => TRUE,
    ],
    'view trust metadata' => [
      'title' => t('View trust metadata'),
      'description' => t('View trust metadata fields on content.'),
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function ucb_trust_schema_entity_insert(EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->bundle() === 'article') {
    // Initialize trust metadata for new articles
    ucb_trust_schema_update_trust_metadata($entity->id(), [
      'trust_role' => '',
      'trust_scope' => '',
      'trust_contact' => '',
      'trust_topics' => [],
      'trust_syndication_enabled' => FALSE,
    ]);
  }
}

/**
 * Implements hook_entity_delete().
 */
function ucb_trust_schema_entity_delete(EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->bundle() === 'article') {
    // Delete trust metadata when article is deleted
    \Drupal::database()->delete('trust_metadata')
      ->condition('nid', $entity->id())
      ->execute();
  }
}

/**
 * Gets trust metadata for a node.
 *
 * @param int $nid
 *   The node ID.
 *
 * @return array
 *   The trust metadata array.
 */
function ucb_trust_schema_get_trust_metadata($nid) {
  $query = \Drupal::database()->select('trust_metadata', 'tm')
    ->fields('tm')
    ->condition('nid', $nid)
    ->execute();
  
  $record = $query->fetchAssoc();
  
  if (!$record) {
    return [
      'trust_role' => NULL,
      'trust_scope' => NULL,
      'trust_contact' => NULL,
      'trust_topics' => [],
      'trust_syndication_enabled' => FALSE,
    ];
  }

  // Convert trust topics from JSON array of IDs to array of term names
  $trust_topics = json_decode($record['trust_topics'], TRUE) ?: [];
  if (!empty($trust_topics)) {
    $term_ids = array_map('intval', $trust_topics);
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadMultiple($term_ids);
    
    $term_names = [];
    foreach ($terms as $term) {
      $term_names[] = $term->getName();
    }
    $trust_topics = $term_names;
  }

  return [
    'trust_role' => $record['trust_role'],
    'trust_scope' => $record['trust_scope'],
    'trust_contact' => $record['trust_contact'],
    'trust_topics' => $trust_topics,
    'trust_syndication_enabled' => (bool) $record['trust_syndication_enabled'],
  ];
}

/**
 * Update trust metadata for a node.
 *
 * @param int $nid
 *   The node ID.
 * @param array $metadata
 *   The trust metadata array.
 *
 * @return bool
 *   TRUE if the update was successful, FALSE otherwise.
 */
function ucb_trust_schema_update_trust_metadata($nid, array $metadata) {
  // Get existing metadata first
  $existing = ucb_trust_schema_get_trust_metadata($nid);
  
  // Prepare the data for saving, preserving existing values if not provided
  $data = [
    'nid' => $nid,
    'uuid' => \Drupal::entityTypeManager()->getStorage('node')->load($nid)->uuid(),
    'trust_role' => $metadata['trust_role'] ?? $existing['trust_role'],
    'trust_scope' => $metadata['trust_scope'] ?? $existing['trust_scope'],
    'trust_contact' => $metadata['trust_contact'] ?? $existing['trust_contact'],
    'trust_topics' => isset($metadata['trust_topics']) ? json_encode($metadata['trust_topics']) : $existing['trust_topics'],
    'trust_syndication_enabled' => isset($metadata['trust_syndication_enabled']) ? (int) $metadata['trust_syndication_enabled'] : (int) $existing['trust_syndication_enabled'],
    'changed' => \Drupal::time()->getRequestTime(),
  ];

  // If this is a new record, add created timestamp
  $exists = \Drupal::database()->select('trust_metadata', 'tm')
    ->condition('nid', $nid)
    ->countQuery()
    ->execute()
    ->fetchField();

  if (!$exists) {
    $data['created'] = $data['changed'];
  }

  try {
    \Drupal::database()->merge('trust_metadata')
      ->key(['nid' => $nid])
      ->fields($data)
      ->execute();
    return TRUE;
  }
  catch (\Exception $e) {
    \Drupal::logger('ucb_trust_schema')->error('Failed to update trust metadata: @error', ['@error' => $e->getMessage()]);
    return FALSE;
  }
}

/**
 * Toggle syndication status for a node.
 *
 * @param int $nid
 *   The node ID.
 * @param bool $enabled
 *   Whether syndication should be enabled.
 *
 * @return bool
 *   TRUE if the update was successful, FALSE otherwise.
 */
function ucb_trust_schema_toggle_syndication($nid, $enabled) {
  // Get existing metadata first
  $metadata = ucb_trust_schema_get_trust_metadata($nid);
  
  // Update only the syndication status while preserving other fields
  $metadata['trust_syndication_enabled'] = $enabled;
  
  return ucb_trust_schema_update_trust_metadata($nid, $metadata);
}

/**
 * Implements hook_theme().
 */
function ucb_trust_schema_theme() {
  return [
    'trust_syndication_page' => [
      'variables' => [
        'node' => NULL,
        'metadata' => [],
        'attributes' => [],
      ],
      'template' => 'trust-syndication-page',
      'path' => \Drupal::service('extension.list.module')->getPath('ucb_trust_schema') . '/templates',
    ],
  ];
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_query_alter().
 */
function ucb_trust_schema_jsonapi_node_query_alter(\Drupal\Core\Database\Query\Select $query, $resource_type) {
  \Drupal::service('ucb_trust_schema.jsonapi')->alterNodeQuery($query, $resource_type);
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_FIELD_NAME_alter().
 */
function ucb_trust_schema_jsonapi_node_field_alter(&$field_value, $field, $entity, $resource_type) {
  \Drupal::service('ucb_trust_schema.jsonapi')->alterFieldValue($field_value, $field->getPublicName(), $entity);
} 