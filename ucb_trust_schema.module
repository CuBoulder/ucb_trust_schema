<?php

/**
 * @file
 * Contains ucb_trust_schema.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\ucb_trust_schema\Entity\TrustMetadata;

/**
 * Implements hook_help().
 */
function ucb_trust_schema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ucb_trust_schema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Trust Schema Module enables individual Drupal sites to declare and expose trust metadata on selected content nodes.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_insert().
 */
function ucb_trust_schema_entity_insert(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    // Create trust metadata entity for all nodes
    $trust_metadata = TrustMetadata::create([
      'node_id' => $entity->id(),
      'trust_role' => '',
      'trust_scope' => '',
      'trust_contact' => '',
      'trust_syndication_enabled' => FALSE,
    ]);
    $trust_metadata->save();
  }
}

/**
 * Implements hook_entity_delete().
 */
function ucb_trust_schema_entity_delete(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    // Delete trust metadata when node is deleted
    $query = \Drupal::entityQuery('trust_metadata')
      ->condition('node_id', $entity->id())
      ->accessCheck(FALSE);
    $ids = $query->execute();
    if (!empty($ids)) {
      $storage = \Drupal::entityTypeManager()->getStorage('trust_metadata');
      $entities = $storage->loadMultiple($ids);
      $storage->delete($entities);
    }
  }
}

/**
 * Gets trust metadata for a node.
 *
 * @param int $nid
 *   The node ID.
 *
 * @return array
 *   The trust metadata array.
 */
function ucb_trust_schema_get_trust_metadata($nid) {
  $query = \Drupal::entityQuery('trust_metadata')
    ->condition('node_id', $nid)
    ->accessCheck(FALSE);
  $ids = $query->execute();

  if (empty($ids)) {
    return [
      'trust_role' => NULL,
      'trust_scope' => NULL,
      'type' => NULL,
      'trust_contact' => NULL,
      'timeliness' => NULL,
      'audience' => NULL,
      'trust_topics' => [],
      'trust_syndication_enabled' => FALSE,
      'syndication_consumer_sites' => 0,
      'syndication_total_views' => 0,
      'syndication_consumer_sites_list' => '',
    ];
  }

  $trust_metadata = TrustMetadata::load(reset($ids));
  $trust_topics = [];
  foreach ($trust_metadata->get('trust_topics') as $topic) {
    $trust_topics[] = $topic->entity->getName();
  }

  return [
    'trust_role' => $trust_metadata->get('trust_role')->value,
    'trust_scope' => $trust_metadata->get('trust_scope')->value,
    'type' => $trust_metadata->get('type')->value,
    'trust_contact' => $trust_metadata->get('trust_contact')->value,
    'timeliness' => $trust_metadata->get('timeliness')->value,
    'audience' => $trust_metadata->get('audience')->value,
    'trust_topics' => $trust_topics,
    'trust_syndication_enabled' => $trust_metadata->get('trust_syndication_enabled')->value,
    'syndication_consumer_sites' => $trust_metadata->get('syndication_consumer_sites')->value ?? 0,
    'syndication_total_views' => $trust_metadata->get('syndication_total_views')->value ?? 0,
    'syndication_consumer_sites_list' => $trust_metadata->get('syndication_consumer_sites_list')->value ?? '',
  ];
}

/**
 * Update trust metadata for a node.
 *
 * @param int $nid
 *   The node ID.
 * @param array $metadata
 *   The trust metadata array.
 *
 * @return bool
 *   TRUE if the update was successful, FALSE otherwise.
 */
function ucb_trust_schema_update_trust_metadata($nid, array $metadata) {
  $query = \Drupal::entityQuery('trust_metadata')
    ->condition('node_id', $nid)
    ->accessCheck(FALSE);
  $ids = $query->execute();

  if (empty($ids)) {
    $trust_metadata = TrustMetadata::create([
      'node_id' => $nid,
    ]);
  }
  else {
    $trust_metadata = TrustMetadata::load(reset($ids));
  }

  if (isset($metadata['trust_role'])) {
    $trust_metadata->set('trust_role', $metadata['trust_role']);
  }
  if (isset($metadata['trust_scope'])) {
    $trust_metadata->set('trust_scope', $metadata['trust_scope']);
  }
  if (isset($metadata['trust_contact'])) {
    $trust_metadata->set('trust_contact', $metadata['trust_contact']);
  }
  if (isset($metadata['trust_topics'])) {
    $trust_metadata->set('trust_topics', $metadata['trust_topics']);
  }
  if (isset($metadata['trust_syndication_enabled'])) {
    $trust_metadata->set('trust_syndication_enabled', $metadata['trust_syndication_enabled']);
  }

  try {
    $trust_metadata->save();
    return TRUE;
  }
  catch (\Exception $e) {
    \Drupal::logger('ucb_trust_schema')->error('Failed to update trust metadata: @error', ['@error' => $e->getMessage()]);
    return FALSE;
  }
}

/**
 * Toggle syndication status for a node.
 *
 * @param int $nid
 *   The node ID.
 * @param bool $enabled
 *   Whether syndication should be enabled.
 *
 * @return bool
 *   TRUE if the update was successful, FALSE otherwise.
 */
function ucb_trust_schema_toggle_syndication($nid, $enabled) {
  return ucb_trust_schema_update_trust_metadata($nid, ['trust_syndication_enabled' => $enabled]);
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_query_alter().
 */
function ucb_trust_schema_jsonapi_node_query_alter(\Drupal\Core\Database\Query\Select $query, $resource_type) {
  \Drupal::service('ucb_trust_schema.jsonapi')->alterNodeQuery($query, $resource_type);
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_FIELD_NAME_alter().
 */
function ucb_trust_schema_jsonapi_node_field_alter(&$field_value, $field, $entity, $resource_type) {
  \Drupal::service('ucb_trust_schema.jsonapi')->alterFieldValue($field_value, $field->getPublicName(), $entity);
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_FIELD_NAME_alter().
 */
function ucb_trust_schema_jsonapi_trust_metadata_field_alter(&$field_value, $field, $entity, $resource_type) {
  \Drupal::logger('ucb_trust_schema')->debug('JSON:API field alter hook called for field: @field', ['@field' => $field->getPublicName()]);
  
  if ($field->getPublicName() === 'content_authority') {
    // Always set content_authority dynamically from site configuration
    $field_value = \Drupal::service('ucb_trust_schema.jsonapi')->getContentAuthority();
    \Drupal::logger('ucb_trust_schema')->debug('Content authority set to: @value', ['@value' => $field_value]);
  } else {
    \Drupal::service('ucb_trust_schema.jsonapi')->alterTrustMetadataFieldValue($field_value, $field->getPublicName(), $entity);
  }
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_resource_object_alter().
 */
function ucb_trust_schema_jsonapi_trust_metadata_resource_object_alter(\Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\jsonapi\ResourceType\ResourceType $resource_type) {
  \Drupal::logger('ucb_trust_schema')->debug('JSON:API resource object alter hook called for trust metadata entity @id', ['@id' => $entity->id()]);
  
  // Always add content_authority field
  $content_authority = \Drupal::service('ucb_trust_schema.jsonapi')->getContentAuthority();
  $resource_object->setField('content_authority', $content_authority);
  \Drupal::logger('ucb_trust_schema')->debug('Content authority set via resource object alter to: @value', ['@value' => $content_authority]);
}

/**
 * Implements hook_jsonapi_resource_object_filter_access().
 */
function ucb_trust_schema_jsonapi_resource_object_filter_access($resource_object, \Drupal\Core\Session\AccountInterface $account) {
  // Check if this is a trust_metadata entity and has content_authority field
  if ($resource_object->getResourceType()->getEntityTypeId() === 'trust_metadata') {
    $data = $resource_object->toArray();
    if (isset($data['attributes']['content_authority'])) {
      $data['attributes']['content_authority'] = \Drupal::service('ucb_trust_schema.jsonapi')->getContentAuthority();
      \Drupal::logger('ucb_trust_schema')->debug('Content authority set in resource object to: @value', ['@value' => $data['attributes']['content_authority']]);
    }
  }
}

/**
 * Implements hook_jsonapi_entity_filter_access().
 */
function ucb_trust_schema_jsonapi_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {
  if ($entity_type->id() === 'trust_metadata') {
    return [
      'filter_among_all' => \Drupal\Core\Access\AccessResult::allowed(),
      'filter_among_enabled' => \Drupal\Core\Access\AccessResult::allowed(),
      'filter_among_published' => \Drupal\Core\Access\AccessResult::allowed(),
    ];
  }
  return [];
}

/**
 * Implements hook_jsonapi_ENTITY_TYPE_filter_access().
 */
function ucb_trust_schema_jsonapi_trust_metadata_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {
  return [
    'filter_among_all' => \Drupal\Core\Access\AccessResult::allowed(),
    'filter_among_enabled' => \Drupal\Core\Access\AccessResult::allowed(),
    'filter_among_published' => \Drupal\Core\Access\AccessResult::allowed(),
  ];
}

/**
 * Get site name from system configuration.
 *
 * @return string
 *   The site name from system.site configuration.
 */
function ucb_trust_schema_get_site_name() {
  return \Drupal::config('system.site')->get('name') ?? '';
}

/**
 * Implements hook_cron().
 */
function ucb_trust_schema_cron() {
  // Get all node IDs.
  $query = \Drupal::entityQuery('node')->accessCheck(FALSE);
  $nids = $query->execute();

  foreach ($nids as $nid) {
    // Check if trust metadata already exists for this node.
    $existing = \Drupal::entityQuery('trust_metadata')
      ->condition('node_id', $nid)
      ->accessCheck(FALSE)
      ->execute();

    if (empty($existing)) {
      // Create new trust metadata entity.
      $trust_metadata = \Drupal\ucb_trust_schema\Entity\TrustMetadata::create([
        'node_id' => $nid,
        'trust_role' => '',
        'trust_scope' => '',
        'trust_contact' => '',
        'trust_syndication_enabled' => FALSE,
      ]);
      try {
        $trust_metadata->save();
        \Drupal::logger('ucb_trust_schema')->notice('Created trust metadata for node @nid during cron', ['@nid' => $nid]);
      }
      catch (\Exception $e) {
        \Drupal::logger('ucb_trust_schema')->error('Failed to create trust metadata for node @nid during cron: @error', [
          '@nid' => $nid,
          '@error' => $e->getMessage(),
        ]);
      }
    }
  }
} 